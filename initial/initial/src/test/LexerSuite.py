import unittest
from TestUtils import TestLexer

class LexerSuite(unittest.TestCase):
      
    def test_identifier(self):
        """test identifiers"""
        self.assertTrue(TestLexer.test("a","a,<EOF>",100))
        self.assertTrue(TestLexer.test("_abc","_abc,<EOF>",101))
        self.assertTrue(TestLexer.test("Warning","Warning,<EOF>",102))
        self.assertTrue(TestLexer.test("Cr7","Cr7,<EOF>",103))
        self.assertTrue(TestLexer.test("_Juventus","_Juventus,<EOF>",104))
        self.assertTrue(TestLexer.test("_alt","_alt,<EOF>",105))
        self.assertTrue(TestLexer.test("_H0ngnhun9","_H0ngnhun9,<EOF>",106))
        self.assertTrue(TestLexer.test("Real___","Real___,<EOF>",107))
        self.assertTrue(TestLexer.test("1break","1,break,<EOF>",108))
        self.assertTrue(TestLexer.test("123identi","123,identi,<EOF>",109))
        self.assertTrue(TestLexer.test("sdf_123","sdf_123,<EOF>",110))
        self.assertTrue(TestLexer.test("_123","_123,<EOF>",111))
        self.assertTrue(TestLexer.test("","<EOF>",112))
    def test_integer(self):
        """test integer"""
        self.assertTrue(TestLexer.test("123a123","123,a123,<EOF>",113))
        self.assertTrue(TestLexer.test("0000001","0000001,<EOF>",114))
        self.assertTrue(TestLexer.test("-121","-121,<EOF>",115))
        self.assertTrue(TestLexer.test("200","200,<EOF>",116))
        self.assertTrue(TestLexer.test("-010","-010,<EOF>",117))
        self.assertTrue(TestLexer.test("0001","0001,<EOF>",118))
        self.assertTrue(TestLexer.test("-2010avb","-2010,avb,<EOF>",119))
    def test_float(self):
        """test float"""
        self.assertTrue(TestLexer.test("1.2","1.2,<EOF>",120))
        self.assertTrue(TestLexer.test("1.","1.,<EOF>",121))
        self.assertTrue(TestLexer.test(".9",".9,<EOF>",122))
        self.assertTrue(TestLexer.test("-0.5","-0.5,<EOF>",123))
        self.assertTrue(TestLexer.test("-2.","-2.,<EOF>",124))
        self.assertTrue(TestLexer.test("-.9","-.9,<EOF>",125))
        self.assertTrue(TestLexer.test("9e10","9e10,<EOF>",126))
        self.assertTrue(TestLexer.test("-2e8","-2e8,<EOF>",127))
        self.assertTrue(TestLexer.test("5e-4","5e-4,<EOF>",128))
        self.assertTrue(TestLexer.test("-7e-5","-7e-5,<EOF>",129))
        self.assertTrue(TestLexer.test("2.0e5","2.0e5,<EOF>",130))
        self.assertTrue(TestLexer.test("5.5e-6","5.5e-6,<EOF>",131))
        self.assertTrue(TestLexer.test("1. .00 00.e-00 .00E-010 120.10e100 01.10 100E3","1.,.00,00.e-00,.00E-010,120.10e100,01.10,100E3,<EOF>",124))
        self.assertTrue(TestLexer.test("-2E8","-2E8,<EOF>",132))
        self.assertTrue(TestLexer.test("9E-10","9E-10,<EOF>",133))
    def test_comment(self):
        """test comment"""
        self.assertTrue(TestLexer.test("//abcs","<EOF>",134))
        self.assertTrue(TestLexer.test("//hahahaha","<EOF>",135))
        self.assertTrue(TestLexer.test("//Hello","<EOF>",136))
        self.assertTrue(TestLexer.test("//Hello","<EOF>",137))
        self.assertTrue(TestLexer.test("{anything_123}","<EOF>",138))
        self.assertTrue(TestLexer.test("(*abcs*)","<EOF>",139))
        self.assertTrue(TestLexer.test("//hahahaha12","<EOF>",140))
        self.assertTrue(TestLexer.test("{don't care}","<EOF>",141))
        self.assertTrue(TestLexer.test("3=5=r=10;{aAs\a\b\c\d\e\f\g\h\i\j\k\l\m\\q'N}i=5;","3,=,5,=,r,=,10,;,i,=,5,;,<EOF>",142))
    def test_keyword(self):
        """test keyword"""
        self.assertTrue(TestLexer.test("return","return,<EOF>",143))
        self.assertTrue(TestLexer.test("DOWNTO","DOWNTO,<EOF>",144))
        self.assertTrue(TestLexer.test("Return","Return,<EOF>",145))
        self.assertTrue(TestLexer.test("for to do then","for,to,do,then,<EOF>",146))
        self.assertTrue(TestLexer.test("Var abc","Var,abc,<EOF>",147))
        self.assertTrue(TestLexer.test("fUnctiOn","fUnctiOn,<EOF>",148))
        self.assertTrue(TestLexer.test("NOT and Or","NOT,and,Or,<EOF>",149))
        self.assertTrue(TestLexer.test("procedure","procedure,<EOF>",150))
        self.assertTrue(TestLexer.test("for","for,<EOF>",151))
        self.assertTrue(TestLexer.test("break","break,<EOF>",152))
        self.assertTrue(TestLexer.test("with","with,<EOF>",153))
        self.assertTrue(TestLexer.test("continue for to","continue,for,to,<EOF>",154))
        self.assertTrue(TestLexer.test("if then else return while begin end function","if,then,else,return,while,begin,end,function,<EOF>",155))
        self.assertTrue(TestLexer.test("real boolean integer string not and or div mod","real,boolean,integer,string,not,and,or,div,mod,<EOF>",156))
        self.assertTrue(TestLexer.test("procedure var true false array of","procedure,var,true,false,array,of,<EOF>",157))
        self.assertTrue(TestLexer.test("BreAk","BreAk,<EOF>",143))
        self.assertTrue(TestLexer.test("with i : integer ; main : integer ; f : integer ; do","with,i,:,integer,;,main,:,integer,;,f,:,integer,;,do,<EOF>",158))
    def test_operator(self):
        """test operator"""
        self.assertTrue(TestLexer.test("2+5=7","2,+,5,=,7,<EOF>",159))
        self.assertTrue(TestLexer.test("a[b+2] = 1","a,[,b,+,2,],=,1,<EOF>",160))
        self.assertTrue(TestLexer.test("1+5","1,+,5,<EOF>",161))
        self.assertTrue(TestLexer.test("true<>false","true,<>,false,<EOF>",162))
        self.assertTrue(TestLexer.test("1.12 * 2","1.12,*,2,<EOF>",163))
        self.assertTrue(TestLexer.test("1/2*6","1,/,2,*,6,<EOF>",164))
        self.assertTrue(TestLexer.test("t+3 > z","t,+,3,>,z,<EOF>",165))
        self.assertTrue(TestLexer.test("1+5","1,+,5,<EOF>",166))
        self.assertTrue(TestLexer.test("a-b","a,-,b,<EOF>",167))
        self.assertTrue(TestLexer.test("6*3+2-1","6,*,3,+,2,-1,<EOF>",168))
        self.assertTrue(TestLexer.test("a/b","a,/,b,<EOF>",169))
        self.assertTrue(TestLexer.test("x=10","x,=,10,<EOF>",170))
        self.assertTrue(TestLexer.test("5<>19","5,<>,19,<EOF>",171))  
        self.assertTrue(TestLexer.test("z<6 and g<=x","z,<,6,and,g,<=,x,<EOF>",172)) 
        self.assertTrue(TestLexer.test("100>=6+3","100,>=,6,+,3,<EOF>",173))  
        self.assertTrue(TestLexer.test("(a+b)*c[1]","(,a,+,b,),*,c,[,1,],<EOF>",174)) 
        self.assertTrue(TestLexer.test("+-*/not mod or and","+,-,*,/,not,mod,or,and,<EOF>",175))
    def test_string(self):
        self.assertTrue(TestLexer.test("\"I'm a programer\"","I'm a programer,<EOF>",176))
        self.assertTrue(TestLexer.test("ONE_2_THREE","ONE_2_THREE,<EOF>",177))
        self.assertTrue(TestLexer.test("[]();:..,","[,],(,),;,:,..,,,<EOF>",178))
    def test_function(self):
        self.assertTrue(TestLexer.test("function foo()","function,foo,(,),<EOF>",180))
        self.assertTrue(TestLexer.test("function a():integer;","function,a,(,),:,integer,;,<EOF>",181))
        self.assertTrue(TestLexer.test("foo(2)[3+x]","foo,(,2,),[,3,+,x,],<EOF>",182))
        self.assertTrue(TestLexer.test("procedure main ();","procedure,main,(,),;,<EOF>",183))
        self.assertTrue(TestLexer.test("foo(2)[3+x]","foo,(,2,),[,3,+,x,],<EOF>",184))
    def test_error(self):
        self.assertTrue(TestLexer.test(";abc @",";,abc,Error Token @",185))
        self.assertTrue(TestLexer.test("ONE 2 THREE ^ FOUR","ONE,2,THREE,Error Token ^",186))
    def test_escape(self):
        self.assertTrue(TestLexer.test("\"dkjoiue\\s\"","Illegal Escape In String: dkjoiue\s",187))
        self.assertTrue(TestLexer.test("\"aAsVN\r\rgge","Unclosed String: aAsVN",199))
    def test_statement(self):
        self.assertTrue(TestLexer.test("a := b [10] := foo()[3] := x := 1 ;","a,:=,b,[,10,],:=,foo,(,),[,3,],:=,x,:=,1,;,<EOF>",189))
        self.assertTrue(TestLexer.test("if (1) then return 2.3; //CORRECT else return 2 ;","if,(,1,),then,return,2.3,;,<EOF>",190))
    def test_procedure(self):
        self.assertTrue(TestLexer.test("procedure goo( x : array [ 1 .. 2] of real);","procedure,goo,(,x,:,array,[,1,..,2,],of,real,),;,<EOF>",191))
        self.assertTrue(TestLexer.test("var i : array [1 ..5] of integer ;","var,i,:,array,[,1,..,5,],of,integer,;,<EOF>",192))
        self.assertTrue(TestLexer.test("1. .00 00.e00 .00E-010 120.10e100 01.10 100E3","1.,.00,00.e00,.00E-010,120.10e100,01.10,100E3,<EOF>",193))
        self.assertTrue(TestLexer.test("uses crt;\nvar i:integer;\n\tst:string;\nbegin\n\tclrscr;\n\tst=\"abcx\\tyz\";\n\twriteln(st);\nend","uses,crt,;,var,i,:,integer,;,st,:,string,;,begin,clrscr,;,st,=,abcx\\tyz,;,writeln,(,st,),;,end,<EOF>",194))
        self.assertTrue(TestLexer.test("askjdh_3497jasd+kjd","askjdh_3497jasd,+,kjd,<EOF>",195))
        self.assertTrue(TestLexer.test("[]();:..,","[,],(,),;,:,..,,,<EOF>",196))
        self.assertTrue(TestLexer.test("function a():integer;","function,a,(,),:,integer,;,<EOF>",197))
        self.assertTrue(TestLexer.test("foo(2)[3+x]","foo,(,2,),[,3,+,x,],<EOF>",198))
        self.assertTrue(TestLexer.test("ONE 2 THREE ^ FOUR","ONE,2,THREE,Error Token ^",199))
        self.assertTrue(TestLexer.test("function f ( ) : integer ;begin return 200; end","function,f,(,),:,integer,;,begin,return,200,;,end,<EOF>",200))